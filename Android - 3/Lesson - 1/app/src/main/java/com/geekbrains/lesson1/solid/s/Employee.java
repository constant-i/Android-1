package com.geekbrains.lesson1.solid.s;


// Этот принцип означает, что каждый класс или подобная структура в вашем коде должна отвечать только за одну цель.
// Все члены этого класса должны быть связаны одной целью. Наш класс не должен быть похож на швейцарский нож,
// в котором при изменении одного из членов нужно изменять весь инструментарий. Это не означает,
// что ваши классы должны содержать только один метод или свойство. Может быть много членов, если они относятся к единой ответственности.

// В данном случае класс Employee не соответствует принципу SRP, т.к. несет две ответственности – добавление нового сотрудника в базу данных и создание отчета.
// Класс Employee не должен нести ответственность за отчетность, т.к. например, если через какое-то время вам скажут,
// что нужно предоставить отчет в формате Excel или изменить алгоритм создания отчета, вам потребуется отредактировать класс Employee.

public class Employee {

    /**
     * Данный метод добавляет сотрудника в БД
     */
    public boolean add() {
        // Вставить данные сотрудника в таблицу БД
        return true;
    }

    /**
     * Отчет по сотруднику
     */
    public void generateReport() {
        // Генерация отчета по деятельности сотрудника
    }
}

// Согласно SRP, один класс должен взять на себя ответственность, поэтому мы должны написать отдельный класс для генерации отчетов:
class EmployeeReport {
    /**
     * Отчет по сотруднику
     */
    public void generateReport() {
        // Генерация отчета по деятельности сотрудника
    }
}